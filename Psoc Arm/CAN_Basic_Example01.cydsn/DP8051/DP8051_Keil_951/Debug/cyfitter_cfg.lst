C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_c
                    -fg.obj)

line level    source

   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.2
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2018 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          #include "cyapicallbacks.h"
  26          
  27          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  28          
  29          
  30          #if defined(__C51__) || defined(__CX51__)
  31                  #define CYPACKED
  32                  #define CYPACKED_ATTR
  33                  #define CYALIGNED
  34                  
  35              #define CY_CFG_UNUSED
  36                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  37          
  38          
  39          
  40                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  41                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  42                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  43          #else
                      #error Unsupported toolchain
              #endif
  46          
  47          
  48          
  49          
  50          /* Clock startup error codes                                                   */
  51          #define CYCLOCKSTART_NO_ERROR    0u
  52          #define CYCLOCKSTART_XTAL_ERROR  1u
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 2   

  53          #define CYCLOCKSTART_32KHZ_ERROR 2u
  54          #define CYCLOCKSTART_PLL_ERROR   3u
  55          #define CYCLOCKSTART_FLL_ERROR   4u
  56          #define CYCLOCKSTART_WCO_ERROR   5u
  57          
  58          
  59          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  60          /*******************************************************************************
  61          * Function Name: CyClockStartupError
  62          ********************************************************************************
  63          * Summary:
  64          *  If an error is encountered during clock configuration (crystal startup error,
  65          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  66          *  the customer, this function will stop in an infinite loop.
  67          *
  68          * Parameters:
  69          *   void
  70          *
  71          * Return:
  72          *   void
  73          *
  74          *******************************************************************************/
  75          CY_CFG_UNUSED
  76          static void CyClockStartupError(uint8 errorCode);
  77          CY_CFG_UNUSED
  78          static void CyClockStartupError(uint8 errorCode)
  79          {
  80   1          /* To remove the compiler warning if errorCode not used.                */
  81   1          errorCode = errorCode;
  82   1      
  83   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  84   1          /* we will end up here to allow the customer to implement something to  */
  85   1          /* deal with the clock condition.                                       */
  86   1      
  87   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  90   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  91   1          /* `#START CyClockStartupError` */
  92   1      
  93   1      
  94   1      
  95   1          /* `#END` */
  96   1      
  97   1          while(1) {}
  98   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
  99   1      }
 100          #endif
 101          
 102          #define cfg_byte_table ((const void CYFAR *)0x080000u)
 103          /* IOPINS0_0 Address: CYREG_PRT0_DR Size (bytes): 10 */
 104          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080130u)
 105          
 106          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 107          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x0008013Cu)
 108          
 109          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 110          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080144u)
 111          
 112          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 113          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x0008014Cu)
 114          
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 3   

 115          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 116          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00080154u)
 117          
 118          
 119          /*******************************************************************************
 120          * Function Name: ClockSetup
 121          ********************************************************************************
 122          *
 123          * Summary:
 124          *  Performs the initialization of all of the clocks in the device based on the
 125          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 126          *  clocks and setting the necessary dividers to produce the desired frequency. 
 127          *
 128          * Parameters:
 129          *  void
 130          *
 131          * Return:
 132          *  void
 133          *
 134          *******************************************************************************/
 135          static void ClockSetup(void);
 136          static void ClockSetup(void)
 137          {
 138   1              uint32 timeout;
 139   1              uint8 pllLock;
 140   1      
 141   1      
 142   1              /* Configure Digital Clocks based on settings from Clock DWR */
 143   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0000u);
 144   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x50u);
 145   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0001u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x18u);
 147   1      
 148   1              /* Configure Analog Clocks based on settings from Clock DWR */
 149   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 150   1      
 151   1              /* Configure ILO based on settings from Clock DWR */
 152   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 154   1      
 155   1              /* Configure IMO based on settings from Clock DWR */
 156   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 157   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 158   1      
 159   1              /* Configure PLL based on settings from Clock DWR */
 160   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 161   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 162   1              /* Wait up to 250us for the PLL to lock */
 163   1              pllLock = 0u;
 164   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 165   1              { 
 166   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 167   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 168   2              }
 169   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 170   1              if (timeout == 0u)
 171   1              {
 172   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 173   2              }
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 4   

 174   1      
 175   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 176   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 178   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 179   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 180   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 181   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 182   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 183   1      
 184   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x03u
             -)));
 185   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 186   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 187   1      }
 188          
 189          
 190          /* Analog API Functions */
 191          
 192          
 193          /*******************************************************************************
 194          * Function Name: AnalogSetDefault
 195          ********************************************************************************
 196          *
 197          * Summary:
 198          *  Sets up the analog portions of the chip to default values based on chip
 199          *  configuration options from the project.
 200          *
 201          * Parameters:
 202          *  void
 203          *
 204          * Return:
 205          *  void
 206          *
 207          *******************************************************************************/
 208          static void AnalogSetDefault(void);
 209          static void AnalogSetDefault(void)
 210          {
 211   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 212   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 213   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 214   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x01u);
 215   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x10u);
 216   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x66u);
 217   1      }
 218          
 219          
 220          /*******************************************************************************
 221          * Function Name: SetAnalogRoutingPumps
 222          ********************************************************************************
 223          *
 224          * Summary:
 225          * Enables or disables the analog pumps feeding analog routing switches.
 226          * Intended to be called at startup, based on the Vdda system configuration;
 227          * may be called during operation when the user informs us that the Vdda voltage
 228          * crossed the pump threshold.
 229          *
 230          * Parameters:
 231          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 232          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 5   

 233          * Return:
 234          *  void
 235          *
 236          *******************************************************************************/
 237          void SetAnalogRoutingPumps(uint8 enabled)
 238          {
 239   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 240   1              if (enabled != 0u)
 241   1              {
 242   2                      regValue |= 0x22u;
 243   2              }
 244   1              else
 245   1              {
 246   2                      regValue &= (uint8)~0x22u;
 247   2              }
 248   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 249   1      }
 250          
 251          
 252          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 253          /* This is an implementation detail of the AMux. Code that depends on it may be
 254             incompatible with other versions of PSoC Creator. */
 255          uint8 CYXDATA * const CYCODE ADC_AMux__addrTable[2] = {
 256                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 257                  (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 258          };
 259          
 260          /* This is an implementation detail of the AMux. Code that depends on it may be
 261             incompatible with other versions of PSoC Creator. */
 262          const uint8 CYCODE ADC_AMux__maskTable[2] = {
 263                  0x40u, 
 264                  0x00u, 
 265          };
 266          
 267          /*******************************************************************************
 268          * Function Name: ADC_AMux_Set
 269          ********************************************************************************
 270          * Summary:
 271          *  This function is used to set a particular channel as active on the AMux.
 272          *
 273          * Parameters:  
 274          *   channel - The mux channel input to set as active
 275          *
 276          * Return:
 277          *   void
 278          *
 279          *******************************************************************************/
 280          void ADC_AMux_Set(uint8 channel)
 281          {
 282   1              if (channel < 2)
 283   1              {
 284   2                      *ADC_AMux__addrTable[channel] |= ADC_AMux__maskTable[channel];
 285   2              }
 286   1      }
 287          
 288          /*******************************************************************************
 289          * Function Name: ADC_AMux_Unset
 290          ********************************************************************************
 291          * Summary:
 292          *  This function is used to clear a particular channel from being active on the
 293          *  AMux.
 294          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 6   

 295          * Parameters:  
 296          *   channel - The mux channel input to mark inactive
 297          *
 298          * Return:
 299          *   void
 300          *
 301          *******************************************************************************/
 302          void ADC_AMux_Unset(uint8 channel)
 303          {
 304   1              if (channel < 2)
 305   1              {
 306   2                      *ADC_AMux__addrTable[channel] &= (uint8)~ADC_AMux__maskTable[channel];
 307   2              }
 308   1      }
 309          
 310          
 311          
 312          /*******************************************************************************
 313          * Function Name: cyfitter_cfg
 314          ********************************************************************************
 315          * Summary:
 316          *  This function is called by the start-up code for the selected device. It
 317          *  performs all of the necessary device configuration based on the design
 318          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 319          *  as Clocks and Pins as well as any component configuration that is necessary.
 320          *
 321          * Parameters:
 322          *   void
 323          *
 324          * Return:
 325          *   void
 326          *
 327          *******************************************************************************/
 328          
 329          void cyfitter_cfg(void)
 330          {
 331   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 332   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 333   1      
 334   1              {
 335   2      
 336   2                      CYPACKED typedef struct {
 337   2                              void CYFAR *address;
 338   2                              uint16 size;
 339   2                      } CYPACKED_ATTR cfg_memset_t;
 340   2      
 341   2                      static const cfg_memset_t CYCODE cfg_memset_list[] = {
 342   2                              /* address, size */
 343   2                              {(void CYFAR *)(CYREG_PRT4_DR), 48u},
 344   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 345   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 346   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 347   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 348   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 349   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 350   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 351   2                      };
 352   2      
 353   2                      uint8 CYDATA i;
 354   2      
 355   2                      /* Zero out critical memory blocks before beginning configuration */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 7   

 356   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 357   2                      {
 358   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 359   3                              CYMEMZERO(ms->address, ms->size);
 360   3                      }
 361   2      
 362   2                      cfg_write_bytes(cfg_byte_table);
 363   2      
 364   2                      /* Perform normal device configuration. Order is not critical for these items. */
 365   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 366   2      
 367   2                      /* Enable digital routing */
 368   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 369   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 370   2      
 371   2                      /* Enable UDB array */
 372   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 373   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 374   2              }
 375   1      
 376   1      
 377   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 378   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DR), (const void CYFAR *)(BS_IOPINS0_0_VAL), 10u);
 379   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 380   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 381   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 382   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 383   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 384   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 385   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 386   1              {
 387   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 388   2              }
 389   1      
 390   1      
 391   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 392   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0x31u : 0x00u));
 393   1              /* Setup clocks based on selections from Clock DWR */
 394   1              ClockSetup();
 395   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 396   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 397   1      
 398   1              /* Perform basic analog initialization to defaults */
 399   1              AnalogSetDefault();
 400   1      
 401   1              /* Configure alternate active mode */
 402   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 403   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 404   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 97
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 143
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 144
000D 904082            MOV     DPTR,#04082H
0010 7450              MOV     A,#050H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 7D01              MOV     R5,#01H
001B 7C00              MOV     R4,#00H
001D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 146
0020 904086            MOV     DPTR,#04086H
0023 7418              MOV     A,#018H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0026 7B08              MOV     R3,#08H
0028 7A01              MOV     R2,#01H
002A 7954              MOV     R1,#054H
002C C003              PUSH    AR3
002E C002              PUSH    AR2
0030 C001              PUSH    AR1
0032 7B00              MOV     R3,#00H
0034 7A41              MOV     R2,#041H
0036 7900              MOV     R1,#00H
0038 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
003B 120000      E     LCALL   ?C?PSTXDATA
003E D001              POP     AR1
0040 D002              POP     AR2
0042 D003              POP     AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 9   

0044 7F04              MOV     R7,#04H
0046 7E00              MOV     R6,#00H
0048 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 152
004B 904300            MOV     DPTR,#04300H
004E 7402              MOV     A,#02H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0051 904000            MOV     DPTR,#04000H
0054 7408              MOV     A,#08H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0057 904200            MOV     DPTR,#04200H
005A 7403              MOV     A,#03H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
005D 7B0C              MOV     R3,#0CH
005F 7A01              MOV     R2,#01H
0061 7908              MOV     R1,#08H
0063 120000      E     LCALL   _cyread8
0066 9046A1            MOV     DPTR,#046A1H
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
006B 7B00              MOV     R3,#00H
006D 7A42              MOV     R2,#042H
006F 7922              MOV     R1,#022H
0071 7D08              MOV     R5,#08H
0073 7C00              MOV     R4,#00H
0075 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 161
0078 7B00              MOV     R3,#00H
007A 7A42              MOV     R2,#042H
007C 7920              MOV     R1,#020H
007E 7D51              MOV     R5,#051H
0080 7C12              MOV     R4,#012H
0082 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 163
0085 900000      R     MOV     DPTR,#pllLock
0088 E4                CLR     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
008A 7F19              MOV     R7,#019H
008C 7E00              MOV     R6,#00H
008E 7D00              MOV     R5,#00H
0090 7C00              MOV     R4,#00H
0092 900000      R     MOV     DPTR,#timeout
0095 120000      E     LCALL   ?C?LSTXDATA
0098         ?C0004:
0098 900000      R     MOV     DPTR,#timeout
009B 120000      E     LCALL   ?C?LLDXDATA
009E D3                SETB    C
009F EF                MOV     A,R7
00A0 9400              SUBB    A,#00H
00A2 EE                MOV     A,R6
00A3 9400              SUBB    A,#00H
00A5 404E              JC      ?C0005
00A7 900000      R     MOV     DPTR,#pllLock
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC EF                MOV     A,R7
00AD 6403              XRL     A,#03H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 10  

00AF 6044              JZ      ?C0005
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
00B1 904225            MOV     DPTR,#04225H
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EF                MOV     A,R7
00B7 5401              ANL     A,#01H
00B9 FF                MOV     R7,A
00BA 7E00              MOV     R6,#00H
00BC 900000      R     MOV     DPTR,#pllLock
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 EE                MOV     A,R6
00C2 25E0              ADD     A,ACC
00C4 FE                MOV     R6,A
00C5 EE                MOV     A,R6
00C6 4F                ORL     A,R7
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 5403              ANL     A,#03H
00CB FF                MOV     R7,A
00CC 900000      R     MOV     DPTR,#pllLock
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
00D1 7FE0              MOV     R7,#0E0H
00D3 7E01              MOV     R6,#01H
00D5 7D00              MOV     R5,#00H
00D7 7C00              MOV     R4,#00H
00D9 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 168
00DC 900000      R     MOV     DPTR,#timeout
00DF 120000      E     LCALL   ?C?LLDXDATA
00E2 7BFF              MOV     R3,#0FFH
00E4 7AFF              MOV     R2,#0FFH
00E6 79FF              MOV     R1,#0FFH
00E8 78FF              MOV     R0,#0FFH
00EA 120000      E     LCALL   ?C?LADD
00ED 900000      R     MOV     DPTR,#timeout
00F0 120000      E     LCALL   ?C?LSTXDATA
00F3 80A3              SJMP    ?C0004
00F5         ?C0005:
                                           ; SOURCE LINE # 170
00F5 900000      R     MOV     DPTR,#timeout
00F8 120000      E     LCALL   ?C?LLDXDATA
00FB EF                MOV     A,R7
00FC 4E                ORL     A,R6
00FD 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
00FF 7F03              MOV     R7,#03H
0101 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 173
0104         ?C0007:
                                           ; SOURCE LINE # 176
0104 7B00              MOV     R3,#00H
0106 7A40              MOV     R2,#040H
0108 7904              MOV     R1,#04H
010A 7D00              MOV     R5,#00H
010C 7C01              MOV     R4,#01H
010E 120000      E     LCALL   _cywrite16
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 11  

                                           ; SOURCE LINE # 177
0111 904004            MOV     DPTR,#04004H
0114 7407              MOV     A,#07H
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0117 904006            MOV     DPTR,#04006H
011A E4                CLR     A
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
011C 904008            MOV     DPTR,#04008H
011F 7448              MOV     A,#048H
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0122 904004            MOV     DPTR,#04004H
0125 E4                CLR     A
0126 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0127 904001            MOV     DPTR,#04001H
012A 7402              MOV     A,#02H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
012D 90400B            MOV     DPTR,#0400BH
0130 7404              MOV     A,#04H
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0133 9043A2            MOV     DPTR,#043A2H
0136 E0                MOVX    A,@DPTR
0137 FF                MOV     R7,A
0138 EF                MOV     A,R7
0139 4403              ORL     A,#03H
013B FF                MOV     R7,A
013C 9043A2            MOV     DPTR,#043A2H
013F EF                MOV     A,R7
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0141 9043A1            MOV     DPTR,#043A1H
0144 E0                MOVX    A,@DPTR
0145 FF                MOV     R7,A
0146 EF                MOV     A,R7
0147 4401              ORL     A,#01H
0149 FF                MOV     R7,A
014A 9043A1            MOV     DPTR,#043A1H
014D EF                MOV     A,R7
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
014F 9043A0            MOV     DPTR,#043A0H
0152 E0                MOVX    A,@DPTR
0153 FF                MOV     R7,A
0154 EF                MOV     A,R7
0155 4480              ORL     A,#080H
0157 FF                MOV     R7,A
0158 9043A0            MOV     DPTR,#043A0H
015B EF                MOV     A,R7
015C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
015D 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 12  

0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
002F 90510D            MOV     DPTR,#0510DH
0032 7401              MOV     A,#01H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0035 905B00            MOV     DPTR,#05B00H
0038 7410              MOV     A,#010H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
003B 905876            MOV     DPTR,#05876H
003E 7466              MOV     A,#066H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0041 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 237
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
000F 900000      R     MOV     DPTR,#enabled
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 13  

0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4422              ORL     A,#022H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54DD              ANL     A,#0DDH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0035         ?C0011:
                                           ; SOURCE LINE # 248
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION _ADC_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 280
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5036              JNC     ?C0014
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 14  

0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0046         ?C0014:
0046 22                RET     
             ; FUNCTION _ADC_AMux_Set (END)

             ; FUNCTION _ADC_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 302
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5039              JNC     ?C0016
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 15  

001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0049         ?C0016:
0049 22                RET     
             ; FUNCTION _ADC_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 356
0016 750000      R     MOV     i,#00H
0019         ?C0017:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9408              SUBB    A,#08H
001E 503A              JNC     ?C0018
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 16  

0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 359
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 360
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0017
005A         ?C0018:
                                           ; SOURCE LINE # 362
005A 7B08              MOV     R3,#08H
005C 7A00              MOV     R2,#00H
005E 7900              MOV     R1,#00H
0060 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 365
0063 905883            MOV     DPTR,#05883H
0066 740A              MOV     A,#0AH
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0069 7B01              MOV     R3,#01H
006B 7A50              MOV     R2,#050H
006D 7903              MOV     R1,#03H
006F 120000      E     LCALL   _cyread8
0072 EF                MOV     A,R7
0073 4402              ORL     A,#02H
0075 FD                MOV     R5,A
0076 7B01              MOV     R3,#01H
0078 7A50              MOV     R2,#050H
007A 7903              MOV     R1,#03H
007C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 369
007F 7B01              MOV     R3,#01H
0081 7A50              MOV     R2,#050H
0083 7913              MOV     R1,#013H
0085 120000      E     LCALL   _cyread8
0088 EF                MOV     A,R7
0089 4402              ORL     A,#02H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 17  

008B FD                MOV     R5,A
008C 7B01              MOV     R3,#01H
008E 7A50              MOV     R2,#050H
0090 7913              MOV     R1,#013H
0092 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 372
0095 9043A0            MOV     DPTR,#043A0H
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 4440              ORL     A,#040H
009D FF                MOV     R7,A
009E 9043A0            MOV     DPTR,#043A0H
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
00A3 9043C2            MOV     DPTR,#043C2H
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 4410              ORL     A,#010H
00AB FF                MOV     R7,A
00AC 9043C2            MOV     DPTR,#043C2H
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 378
00B1 7B08              MOV     R3,#08H
00B3 7A01              MOV     R2,#01H
00B5 7930              MOV     R1,#030H
00B7 C003              PUSH    AR3
00B9 C002              PUSH    AR2
00BB C001              PUSH    AR1
00BD 7B00              MOV     R3,#00H
00BF 7A51              MOV     R2,#051H
00C1 7900              MOV     R1,#00H
00C3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C6 120000      E     LCALL   ?C?PSTXDATA
00C9 D001              POP     AR1
00CB D002              POP     AR2
00CD D003              POP     AR3
00CF 7F0A              MOV     R7,#0AH
00D1 7E00              MOV     R6,#00H
00D3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 379
00D6 7B08              MOV     R3,#08H
00D8 7A01              MOV     R2,#01H
00DA 793C              MOV     R1,#03CH
00DC C003              PUSH    AR3
00DE C002              PUSH    AR2
00E0 C001              PUSH    AR1
00E2 7B00              MOV     R3,#00H
00E4 7A51              MOV     R2,#051H
00E6 7912              MOV     R1,#012H
00E8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EB 120000      E     LCALL   ?C?PSTXDATA
00EE D001              POP     AR1
00F0 D002              POP     AR2
00F2 D003              POP     AR3
00F4 7F08              MOV     R7,#08H
00F6 7E00              MOV     R6,#00H
00F8 120000      E     LCALL   _cyconfigcpy
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 18  

                                           ; SOURCE LINE # 380
00FB 7B08              MOV     R3,#08H
00FD 7A01              MOV     R2,#01H
00FF 7944              MOV     R1,#044H
0101 C003              PUSH    AR3
0103 C002              PUSH    AR2
0105 C001              PUSH    AR1
0107 7B00              MOV     R3,#00H
0109 7A51              MOV     R2,#051H
010B 7922              MOV     R1,#022H
010D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0110 120000      E     LCALL   ?C?PSTXDATA
0113 D001              POP     AR1
0115 D002              POP     AR2
0117 D003              POP     AR3
0119 7F08              MOV     R7,#08H
011B 7E00              MOV     R6,#00H
011D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 381
0120 7B08              MOV     R3,#08H
0122 7A01              MOV     R2,#01H
0124 794C              MOV     R1,#04CH
0126 C003              PUSH    AR3
0128 C002              PUSH    AR2
012A C001              PUSH    AR1
012C 7B00              MOV     R3,#00H
012E 7A51              MOV     R2,#051H
0130 7932              MOV     R1,#032H
0132 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0135 120000      E     LCALL   ?C?PSTXDATA
0138 D001              POP     AR1
013A D002              POP     AR2
013C D003              POP     AR3
013E 7F08              MOV     R7,#08H
0140 7E00              MOV     R6,#00H
0142 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 382
0145 9044F4            MOV     DPTR,#044F4H
0148 7401              MOV     A,#01H
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
014B 904322            MOV     DPTR,#04322H
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 EF                MOV     A,R7
0151 4408              ORL     A,#08H
0153 FF                MOV     R7,A
0154 904322            MOV     DPTR,#04322H
0157 EF                MOV     A,R7
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0159 9046EC            MOV     DPTR,#046ECH
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E EF                MOV     A,R7
015F C3                CLR     C
0160 9405              SUBB    A,#05H
0162 5006              JNC     ?C0020
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0164 904689            MOV     DPTR,#04689H
0167 743A              MOV     A,#03AH
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/19/2018 18:58:10 PAGE 19  

0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
016A         ?C0020:
                                           ; SOURCE LINE # 392
016A 904800            MOV     DPTR,#04800H
016D 7431              MOV     A,#031H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0170 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 396
0173 904800            MOV     DPTR,#04800H
0176 74B1              MOV     A,#0B1H
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0179 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 402
017C 7B00              MOV     R3,#00H
017E 7A43              MOV     R2,#043H
0180 79A0              MOV     R1,#0A0H
0182 C003              PUSH    AR3
0184 C002              PUSH    AR2
0186 C001              PUSH    AR1
0188 7B00              MOV     R3,#00H
018A 7A43              MOV     R2,#043H
018C 79B0              MOV     R1,#0B0H
018E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0191 120000      E     LCALL   ?C?PSTXDATA
0194 D001              POP     AR1
0196 D002              POP     AR2
0198 D003              POP     AR3
019A 7F0E              MOV     R7,#0EH
019C 7E00              MOV     R6,#00H
019E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 403
01A1 9043B0            MOV     DPTR,#043B0H
01A4 E0                MOVX    A,@DPTR
01A5 FF                MOV     R7,A
01A6 EF                MOV     A,R7
01A7 54FD              ANL     A,#0FDH
01A9 FF                MOV     R7,A
01AA EF                MOV     A,R7
01AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
01AC 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1072    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
