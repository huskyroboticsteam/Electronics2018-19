C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LCD.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LCD.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(2)
                    - PR(.\DP8051\DP8051_Keil_951\Debug/LCD.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\LCD.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides source code for the Character LCD component's API.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CyLib.h"
  18          #include "LCD.h"
  19          
  20          
  21          static void LCD_WrDatNib(uint8 nibble) CYREENTRANT;
  22          static void LCD_WrCntrlNib(uint8 nibble) CYREENTRANT;
  23          
  24          /* Stores state of component. Indicates whether component is or not
  25          * in enable state.
  26          */
  27          uint8 LCD_enableState = 0u;
  28          
  29          uint8 LCD_initVar = 0u;
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: LCD_Init
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Performs initialization required for the components normal work.
  38          *  This function initializes the LCD hardware module as follows:
  39          *        Enables a 4-bit interface
  40          *        Clears the display
  41          *        Enables the auto cursor increment
  42          *        Resets the cursor to start position
  43          *  Also, it loads a custom character set to the LCD if it was defined in the customizer.
  44          *
  45          * Parameters:
  46          *  None.
  47          *
  48          * Return:
  49          *  None.
  50          *
  51          * Reentrant:
  52          *  No.
  53          *
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 2   

  54          *******************************************************************************/
  55          void LCD_Init(void) 
  56          {
  57   1          /* INIT CODE */
  58   1          CyDelay(40u);                                                        /* Delay 40 ms */
  59   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  60   1          CyDelay(5u);                                                         /* Delay 5 ms */
  61   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  62   1          CyDelay(15u);                                                        /* Delay 15 ms */
  63   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  64   1          CyDelay(1u);                                                         /* Delay 1 ms */
  65   1          LCD_WrCntrlNib(LCD_DISPLAY_4_BIT_INIT);    /* Selects 4-bit mode */
  66   1          CyDelay(5u);                                                         /* Delay 5 ms */
  67   1      
  68   1          LCD_WriteControl(LCD_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
  69   1          LCD_WriteControl(LCD_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
  70   1          LCD_WriteControl(LCD_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
  71   1          LCD_WriteControl(LCD_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
  72   1          LCD_WriteControl(LCD_CLEAR_DISPLAY);          /* Clear LCD Screen */
  73   1          LCD_WriteControl(LCD_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
  74   1          LCD_WriteControl(LCD_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
  75   1          CyDelay(5u);
  76   1      
  77   1          #if(LCD_CUSTOM_CHAR_SET != LCD_NONE)
                      LCD_LoadCustomFonts(LCD_customFonts);
                  #endif /* LCD_CUSTOM_CHAR_SET != LCD_NONE */
  80   1      }
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: LCD_Enable
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  Turns on the display.
  89          *
  90          * Parameters:
  91          *  None.
  92          *
  93          * Return:
  94          *  None.
  95          *
  96          * Reentrant:
  97          *  No.
  98          *
  99          * Theory:
 100          *  This function has no effect when it is called the first time as
 101          *  LCD_Init() turns on the LCD.
 102          *
 103          *******************************************************************************/
 104          void LCD_Enable(void) 
 105          {
 106   1          LCD_DisplayOn();
 107   1          LCD_enableState = 1u;
 108   1      }
 109          
 110          
 111          /*******************************************************************************
 112          * Function Name: LCD_Start
 113          ********************************************************************************
 114          *
 115          * Summary:
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 3   

 116          *  Performs initialization required for the components normal work.
 117          *  This function initializes the LCD hardware module as follows:
 118          *        Enables 4-bit interface
 119          *        Clears the display
 120          *        Enables auto cursor increment
 121          *        Resets the cursor to start position
 122          *  Also, it loads a custom character set to the LCD if it was defined in the customizer.
 123          *  If it was not the first call in this project, then it just turns on the
 124          *  display
 125          *
 126          *
 127          * Parameters:
 128          *  LCD_initVar - global variable.
 129          *
 130          * Return:
 131          *  LCD_initVar - global variable.
 132          *
 133          * Reentrant:
 134          *  No.
 135          *
 136          *******************************************************************************/
 137          void LCD_Start(void) 
 138          {
 139   1          /* If not initialized, perform initialization */
 140   1          if(LCD_initVar == 0u)
 141   1          {
 142   2              LCD_Init();
 143   2              LCD_initVar = 1u;
 144   2          }
 145   1      
 146   1          /* Turn on the LCD */
 147   1          LCD_Enable();
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: LCD_Stop
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  Turns off the display of the LCD screen.
 157          *
 158          * Parameters:
 159          *  None.
 160          *
 161          * Return:
 162          *  None.
 163          *
 164          * Reentrant:
 165          *  No.
 166          *
 167          *******************************************************************************/
 168          void LCD_Stop(void) 
 169          {
 170   1          /* Calls LCD Off Macro */
 171   1          LCD_DisplayOff();
 172   1          LCD_enableState = 0u;
 173   1      }
 174          
 175          
 176          /*******************************************************************************
 177          *  Function Name: LCD_Position
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 4   

 178          ********************************************************************************
 179          *
 180          * Summary:
 181          *  Moves the active cursor location to a point specified by the input arguments
 182          *
 183          * Parameters:
 184          *  row:    Specific row of LCD module to be written
 185          *  column: Column of LCD module to be written
 186          *
 187          * Return:
 188          *  None.
 189          *
 190          * Note:
 191          *  This only applies for LCD displays that use the 2X40 address mode.
 192          *  In this case Row 2 starts with a 0x28 offset from Row 1.
 193          *  When there are more than 2 rows, each row must be fewer than 20 characters.
 194          *
 195          *******************************************************************************/
 196          void LCD_Position(uint8 row, uint8 column) CYREENTRANT
 197          {
 198   1          switch (row)
 199   1          {
 200   2              case (uint8)0:
 201   2                  LCD_WriteControl(LCD_ROW_0_START + column);
 202   2                  break;
 203   2              case (uint8) 1:
 204   2                  LCD_WriteControl(LCD_ROW_1_START + column);
 205   2                  break;
 206   2              case (uint8) 2:
 207   2                  LCD_WriteControl(LCD_ROW_2_START + column);
 208   2                  break;
 209   2              case (uint8) 3:
 210   2                  LCD_WriteControl(LCD_ROW_3_START + column);
 211   2                  break;
 212   2              default:
 213   2                  /* if default case is hit, invalid row argument was passed.*/
 214   2                  break;
 215   2          }
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          * Function Name: LCD_PrintString
 221          ********************************************************************************
 222          *
 223          * Summary:
 224          *  Writes a zero terminated string to the LCD.
 225          *
 226          * Parameters:
 227          *  string: Pointer to head of char8 array to be written to the LCD module
 228          *
 229          * Return:
 230          *  None.
 231          *
 232          *******************************************************************************/
 233          void LCD_PrintString(char8 const string[]) CYREENTRANT
 234          {
 235   1          uint8 indexU8 = 1u;
 236   1          char8 current = *string;
 237   1      
 238   1          /* Until null is reached, print next character */
 239   1          while((char8) '\0' != current)
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 5   

 240   1          {
 241   2              LCD_WriteData((uint8)current);
 242   2              current = string[indexU8];
 243   2              indexU8++;
 244   2          }
 245   1      }
 246          
 247          
 248          /*******************************************************************************
 249          *  Function Name: LCD_PutChar
 250          ********************************************************************************
 251          *
 252          * Summary:
 253          *  Writes a single character to the current cursor position of the LCD module.
 254          *  Custom character names (_CUSTOM_0 through
 255          *  _CUSTOM_7) are acceptable as inputs.
 256          *
 257          * Parameters:
 258          *  character: Character to be written to LCD
 259          *
 260          * Return:
 261          *  None.
 262          *
 263          *******************************************************************************/
 264          void LCD_PutChar(char8 character) CYREENTRANT
 265          {
 266   1          LCD_WriteData((uint8)character);
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          *  Function Name: LCD_WriteData
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Writes a data byte to the LCD module's Data Display RAM.
 276          *
 277          * Parameters:
 278          *  dByte: Byte to be written to the LCD module
 279          *
 280          * Return:
 281          *  None.
 282          *
 283          *******************************************************************************/
 284          void LCD_WriteData(uint8 dByte) CYREENTRANT
 285          {
 286   1          uint8 nibble;
 287   1      
 288   1          LCD_IsReady();
 289   1          nibble = dByte >> LCD_NIBBLE_SHIFT;
 290   1      
 291   1          /* Write high nibble */
 292   1          LCD_WrDatNib(nibble);
 293   1      
 294   1          nibble = dByte & LCD_NIBBLE_MASK;
 295   1          /* Write low nibble */
 296   1          LCD_WrDatNib(nibble);
 297   1      }
 298          
 299          
 300          /*******************************************************************************
 301          *  Function Name: LCD_WriteControl
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 6   

 302          ********************************************************************************
 303          *
 304          * Summary:
 305          *  Writes a command byte to the LCD module.
 306          *
 307          * Parameters:
 308          *  cByte:  The byte to be written to theLCD module
 309          * 
 310          * Return:
 311          *  None.
 312          *
 313          *******************************************************************************/
 314          void LCD_WriteControl(uint8 cByte) CYREENTRANT
 315          {
 316   1          uint8 nibble;
 317   1      
 318   1          LCD_IsReady();
 319   1      
 320   1          nibble = cByte >> LCD_NIBBLE_SHIFT;
 321   1          
 322   1          /* WrCntrlNib(High Nibble) */
 323   1          LCD_WrCntrlNib(nibble);
 324   1          nibble = cByte & LCD_NIBBLE_MASK;
 325   1      
 326   1          /* WrCntrlNib(Low Nibble) */
 327   1          LCD_WrCntrlNib(nibble);
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: LCD_IsReady
 333          ********************************************************************************
 334          *
 335          * Summary:
 336          *  Polls the LCD until the ready bit is set or a timeout occurs.
 337          *
 338          * Parameters:
 339          *  None.
 340          *
 341          * Return:
 342          *  None.
 343          *
 344          * Note:
 345          *  Changes the pins to High-Z.
 346          *
 347          *******************************************************************************/
 348          void LCD_IsReady(void) CYREENTRANT
 349          {
 350   1          uint8 value;
 351   1          uint32 timeout;
 352   1          timeout = LCD_READY_DELAY;
 353   1      
 354   1          /* Clear LCD port*/
 355   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_PORT_MASK));
 356   1      
 357   1          /* PSoC4 has a little different from PSoC3/5 port/pin organization for setting Drive Modes.
 358   1        
 359   1          */
 360   1          #if (CY_PSOC4)
                      
                      /* Mask off data pins to clear old values out */
                      value = LCD_PORT_PC_REG & ((uint32) (~ LCD_DM_DATA_MASK));
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 7   

                      /* Load in high Z values for data pins, others unchanged */
                      LCD_PORT_PC_REG = value | LCD_HIGH_Z_DATA_DM;
              
                  #else
 368   1          
 369   1              /* Change Port to High-Z Status on data pins */
 370   1      
 371   1              /* Mask off data pins to clear old values out */
 372   1              value = LCD_PORT_DM0_REG & ((uint8)(~LCD_DATA_MASK));
 373   1              /* Load in high Z values for data pins, others unchanged */
 374   1              LCD_PORT_DM0_REG = value | (LCD_HIGH_Z_DM0 & LCD_DATA_MASK);
 375   1      
 376   1              /* Mask off data pins to clear old values out */
 377   1              value = LCD_PORT_DM1_REG & ((uint8)(~LCD_DATA_MASK));
 378   1              /* Load in high Z values for data pins, others unchanged */
 379   1              LCD_PORT_DM1_REG = value;
 380   1      
 381   1              /* Mask off data pins to clear old values out */
 382   1              value = LCD_PORT_DM2_REG & ((uint8)(~LCD_DATA_MASK));
 383   1              /* Load in high Z values for data pins, others unchanged */
 384   1              LCD_PORT_DM2_REG = value;
 385   1          
 386   1          #endif /* CY_PSOC4 */
 387   1          
 388   1          /* Make sure RS is low */
 389   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_RS));
 390   1      
 391   1          /* Set R/W high to read */
 392   1          LCD_PORT_DR_REG |= LCD_RW;
 393   1      
 394   1          do
 395   1          {
 396   2              /* 40 ns delay required before rising Enable and 500ns between neighbour Enables */
 397   2              CyDelayUs(0u);
 398   2      
 399   2              /* Set E high */
 400   2              LCD_PORT_DR_REG |= LCD_E;
 401   2      
 402   2              /* 360 ns delay setup time for data pins */
 403   2              CyDelayUs(1u);
 404   2      
 405   2              /* Get port state */
 406   2              value = LCD_PORT_PS_REG;
 407   2      
 408   2              /* Set enable low */
 409   2              LCD_PORT_DR_REG &= ((uint8)(~LCD_E));
 410   2      
 411   2              /* This gives true delay between disabling Enable bit and polling Ready bit */
 412   2              CyDelayUs(0u);
 413   2      
 414   2              /* Extract ready bit */
 415   2              value &= LCD_READY_BIT;
 416   2      
 417   2              /* Set E high as we in 4-bit interface we need extra operation */
 418   2              LCD_PORT_DR_REG |= LCD_E;
 419   2      
 420   2              /* 360 ns delay setup time for data pins */
 421   2              CyDelayUs(1u);
 422   2      
 423   2              /* Set enable low */
 424   2              LCD_PORT_DR_REG &= ((uint8)(~LCD_E));
 425   2      
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 8   

 426   2              /* If LCD is not ready make a delay */
 427   2              if (value == 0u)
 428   2              {
 429   3                  CyDelayUs(10u);
 430   3              }
 431   2      
 432   2              /* Repeat until bit 4 is not zero or until timeout. */
 433   2              timeout--;
 434   2      
 435   2          } while ((value != 0u) && (timeout > 0u));
 436   1      
 437   1          /* Set R/W low to write */
 438   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_RW));
 439   1      
 440   1          /* Clear LCD port*/
 441   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_PORT_MASK));
 442   1      
 443   1          #if (CY_PSOC4)
                      
                      /* Mask off data pins to clear old values out */
                      value = LCD_PORT_PC_REG & ((uint32)(~ LCD_DM_DATA_MASK));
                      /* Load in high Z values for data pins, others unchanged */
                      LCD_PORT_PC_REG = value | LCD_STRONG_DATA_DM;
              
                  #else
 451   1      
 452   1              /* Change Port to Output (Strong) on data pins */
 453   1              /* Mask off data pins to clear high z values out. Configure data pins 
 454   1              * to Strong Drive, others unchanged.
 455   1              */
 456   1              LCD_PORT_DM0_REG &= ((uint8)(~LCD_DATA_MASK));
 457   1              /* Mask off data pins to clear high z values out */
 458   1              value = LCD_PORT_DM1_REG & ((uint8)(~LCD_DATA_MASK));
 459   1              /* Configure data pins to Strong Drive, others unchanged */
 460   1              LCD_PORT_DM1_REG = value | (LCD_STRONG_DM1 & LCD_DATA_MASK);
 461   1      
 462   1              /* Mask off data pins to clear high z values out */
 463   1              value = LCD_PORT_DM2_REG & ((uint8)(~LCD_DATA_MASK));
 464   1              /* Configure data pins to Strong Drive, others unchanged */
 465   1              LCD_PORT_DM2_REG = value | (LCD_STRONG_DM2 & LCD_DATA_MASK);
 466   1          
 467   1          #endif /* CY_PSOC4 */
 468   1      }
 469          
 470          
 471          /*******************************************************************************
 472          *  Function Name: LCD_WrDatNib
 473          ********************************************************************************
 474          *
 475          * Summary:
 476          *  Writes a data nibble to the LCD module.
 477          *
 478          * Parameters:
 479          *  nibble:  Byte containing nibble in the least significant nibble to be
 480          *           written to the LCD module.
 481          *
 482          * Return:
 483          *  None.
 484          *
 485          *******************************************************************************/
 486          static void LCD_WrDatNib(uint8 nibble) CYREENTRANT
 487          {
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 9   

 488   1          /* RS should be low to select data register */
 489   1          LCD_PORT_DR_REG |= LCD_RS;
 490   1          /* Reset RW for write operation */
 491   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_RW));
 492   1      
 493   1          /* Guaranteed delay between Setting RS and RW and setting E bits */
 494   1          CyDelayUs(0u);
 495   1          
 496   1          /* Clear data pins */
 497   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_DATA_MASK));
 498   1      
 499   1          /* Write data, bring E high */
 500   1          #if(0u != LCD_PORT_SHIFT) /* MISRA forbids shift by 0 so need to handle that */
                      LCD_PORT_DR_REG |= 
                          (LCD_E | ((uint8)(((uint8) nibble) << LCD_PORT_SHIFT)));
                  #else
 504   1              LCD_PORT_DR_REG |= (LCD_E | nibble);
 505   1          #endif /* (0u != LCD_PORT_SHIFT) */
 506   1      
 507   1          /* Minimum of 230 ns delay */
 508   1          CyDelayUs(1u);
 509   1      
 510   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_E));
 511   1      }
 512          
 513          
 514          /*******************************************************************************
 515          *  Function Name: LCD_WrCntrlNib
 516          ********************************************************************************
 517          *
 518          * Summary:
 519          *  Writes a control nibble to the LCD module.
 520          *
 521          * Parameters:
 522          *  nibble: The byte containing a nibble in the four least significant bits.????
 523          *
 524          * Return:
 525          *  None.
 526          *
 527          *******************************************************************************/
 528          static void LCD_WrCntrlNib(uint8 nibble) CYREENTRANT
 529          {
 530   1          /* RS and RW should be low to select instruction register and  write operation respectively */
 531   1          LCD_PORT_DR_REG &= ((uint8)(~(LCD_RS | LCD_RW)));
 532   1      
 533   1          /* Two following lines of code will give 40ns delay */
 534   1          /* Clear data pins */
 535   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_DATA_MASK));
 536   1      
 537   1          /* Write control data and set enable signal */
 538   1          #if(0u != LCD_PORT_SHIFT) /* MISRA forbids shift by 0 so need to handle that */
                      LCD_PORT_DR_REG |= 
                          (LCD_E | ((uint8)(((uint8) nibble) << LCD_PORT_SHIFT)));
                  #else
 542   1              LCD_PORT_DR_REG |= (LCD_E | nibble);
 543   1          #endif /* (0u != LCD_PORT_SHIFT) */
 544   1      
 545   1          /* Minimum of 230 ns delay */
 546   1          CyDelayUs(1u);
 547   1      
 548   1          LCD_PORT_DR_REG &= ((uint8)(~LCD_E));
 549   1      }
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 10  

 550          
 551          
 552          #if(LCD_CONVERSION_ROUTINES == 1u)
 553          
 554              /*******************************************************************************
 555              *  Function Name: LCD_PrintInt8
 556              ********************************************************************************
 557              *
 558              * Summary:
 559              *  Print a byte as two ASCII characters.
 560              *
 561              * Parameters:
 562              *  value: The byte to be printed out as ASCII characters.
 563              *
 564              * Return:
 565              *  None.
 566              *
 567              *******************************************************************************/
 568              void LCD_PrintInt8(uint8 value) CYREENTRANT
 569              {
 570   1              static char8 const CYCODE LCD_hex[16u] = "0123456789ABCDEF";
 571   1              
 572   1              LCD_PutChar((char8) LCD_hex[value >> LCD_BYTE_UPPER_NIBBLE_SHIFT]);
 573   1              LCD_PutChar((char8) LCD_hex[value & LCD_BYTE_LOWER_NIBBLE_MASK]);
 574   1          }
 575          
 576          
 577              /*******************************************************************************
 578              *  Function Name: LCD_PrintInt16
 579              ********************************************************************************
 580              *
 581              * Summary:
 582              *  Print a uint16 as four ASCII characters.
 583              *
 584              * Parameters:
 585              *  value: The uint16 to be printed out as ASCII characters.
 586              *
 587              * Return:
 588              *  None.
 589              *
 590              *******************************************************************************/
 591              void LCD_PrintInt16(uint16 value) 
 592              {
 593   1              LCD_PrintInt8((uint8)(value >> LCD_U16_UPPER_BYTE_SHIFT));
 594   1              LCD_PrintInt8((uint8)(value & LCD_U16_LOWER_BYTE_MASK));
 595   1          }
 596          
 597              
 598              /*******************************************************************************
 599              *  Function Name: LCD_PrintInt32
 600              ********************************************************************************
 601              *
 602              * Summary:
 603              *  Print a uint32 hexadecimal number as eight ASCII characters.
 604              *
 605              * Parameters:
 606              *  value: The uint32 to be printed out as ASCII characters.
 607              *
 608              * Return:
 609              *  None.
 610              *
 611              *******************************************************************************/
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 11  

 612              void LCD_PrintInt32(uint32 value) 
 613              {
 614   1              uint8 shift = LCD_32_BIT_SHIFT;
 615   1              
 616   1              while (shift != 0u)
 617   1              {
 618   2                  /* "shift" var is to be subtracted by 8 prior shifting. This implements 
 619   2                  * shifting by 24, 16, 8 and 0u. 
 620   2                  */
 621   2                  shift -= LCD_8_BIT_SHIFT;
 622   2                  
 623   2                  /* Print 8 bits of uint32 hex number */
 624   2                  LCD_PrintInt8((uint8) ((uint32) (value >> shift)));
 625   2              }
 626   1          }
 627              
 628              
 629              /*******************************************************************************
 630              *  Function Name: LCD_PrintNumber
 631              ********************************************************************************
 632              *
 633              * Summary:
 634              *  Print an uint16 value as a left-justified decimal value.
 635              *
 636              * Parameters:
 637              *  value: A 16-bit value to be printed in ASCII characters as a decimal number
 638              *
 639              * Return:
 640              *  None.
 641              *
 642              * Note:
 643              *  This function is implemented as a macro.
 644              *
 645              *******************************************************************************/
 646          
 647              
 648              /*******************************************************************************
 649              *  Function Name: LCD_PrintU32Number
 650              ********************************************************************************
 651              *
 652              * Summary:
 653              *  Print an uint32 value as a left-justified decimal value.
 654              *
 655              * Parameters:
 656              *  value: A 32-bit value to be printed in ASCII characters as a decimal number
 657              *
 658              * Return:
 659              *  None.
 660              *
 661              *******************************************************************************/
 662              void LCD_PrintU32Number(uint32 value) 
 663              {
 664   1              uint8 tmpDigit;
 665   1              char8 number[LCD_NUMBER_OF_REMAINDERS_U32 + 1u];
 666   1              uint8 digIndex = LCD_NUMBER_OF_REMAINDERS_U32;
 667   1              
 668   1              /* This API will output a decimal number as a string and that string will be 
 669   1              * filled from end to start. Set Null termination character first.
 670   1              */
 671   1              number[digIndex] = (char8) '\0';
 672   1              digIndex--;
 673   1              
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 12  

 674   1              /* Load these in reverse order */
 675   1              while(value >= LCD_TEN)
 676   1              {
 677   2                  /* Extract decimal digit, indexed by 'digIndex', from 'value' and
 678   2                  * convert it to ASCII character.
 679   2                  */
 680   2                  tmpDigit = (uint8) (((uint8) (value % LCD_TEN)) + (uint8) LCD_ZERO_CHAR_ASCII);
 681   2                  
 682   2                  /* Temporary variable 'tmpDigit' is used to avoid Violation of MISRA rule 
 683   2                  * #10.3.
 684   2                  */
 685   2                  number[digIndex] = (char8) tmpDigit;
 686   2                  value /= LCD_TEN;
 687   2                  digIndex--;
 688   2              }
 689   1              
 690   1              /* Extract last decimal digit 'digIndex', from the 'value' and convert it
 691   1              * to ASCII character.
 692   1              */
 693   1              tmpDigit = (uint8) (((uint8)(value % LCD_TEN)) + (uint8) LCD_ZERO_CHAR_ASCII);
 694   1              number[digIndex] = (char8) tmpDigit;
 695   1      
 696   1              /* Print out number */
 697   1              LCD_PrintString(&number[digIndex]);
 698   1          }
 699              
 700          #endif /* LCD_CONVERSION_ROUTINES == 1u */
 701          
 702          
 703          /* [] END OF FILE */
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LCD_Init (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0000 7F28              MOV     R7,#028H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 59
000B 7F03              MOV     R7,#03H
000D 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 60
0010 7F05              MOV     R7,#05H
0012 7E00              MOV     R6,#00H
0014 7D00              MOV     R5,#00H
0016 7C00              MOV     R4,#00H
0018 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 61
001B 7F03              MOV     R7,#03H
001D 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 62
0020 7F0F              MOV     R7,#0FH
0022 7E00              MOV     R6,#00H
0024 7D00              MOV     R5,#00H
0026 7C00              MOV     R4,#00H
0028 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 63
002B 7F03              MOV     R7,#03H
002D 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 64
0030 7F01              MOV     R7,#01H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 65
003B 7F02              MOV     R7,#02H
003D 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 66
0040 7F05              MOV     R7,#05H
0042 7E00              MOV     R6,#00H
0044 7D00              MOV     R5,#00H
0046 7C00              MOV     R4,#00H
0048 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 68
004B 7F06              MOV     R7,#06H
004D 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 69
0050 7F0E              MOV     R7,#0EH
0052 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 70
0055 7F2C              MOV     R7,#02CH
0057 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 71
005A 7F08              MOV     R7,#08H
005C 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 72
005F 7F01              MOV     R7,#01H
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 14  

0061 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 73
0064 7F0C              MOV     R7,#0CH
0066 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 74
0069 7F03              MOV     R7,#03H
006B 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 75
006E 7F05              MOV     R7,#05H
0070 7E00              MOV     R6,#00H
0072 7D00              MOV     R5,#00H
0074 7C00              MOV     R4,#00H
0076 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 80
0079 22                RET     
             ; FUNCTION LCD_Init (END)

             ; FUNCTION LCD_Enable (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 7F0C              MOV     R7,#0CH
0002 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 107
0005 900000      R     MOV     DPTR,#LCD_enableState
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
000B 22                RET     
             ; FUNCTION LCD_Enable (END)

             ; FUNCTION LCD_Start (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
0000 900000      R     MOV     DPTR,#LCD_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0008 120000      R     LCALL   LCD_Init
                                           ; SOURCE LINE # 143
000B 900000      R     MOV     DPTR,#LCD_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0011         ?C0003:
                                           ; SOURCE LINE # 147
0011 120000      R     LCALL   LCD_Enable
                                           ; SOURCE LINE # 148
0014 22                RET     
             ; FUNCTION LCD_Start (END)

             ; FUNCTION LCD_Stop (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 171
0000 7F08              MOV     R7,#08H
0002 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 172
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 15  

0005 900000      R     MOV     DPTR,#LCD_enableState
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
000A 22                RET     
             ; FUNCTION LCD_Stop (END)

             ; FUNCTION _?LCD_Position (BEGIN)
                                           ; SOURCE LINE # 196
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0010 850083      E     MOV     DPH,?C_XBP
0013 850082      E     MOV     DPL,?C_XBP+01H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 120000      E     LCALL   ?C?CCASE
001C 0000        R     DW      ?C0007
001E 00                DB      00H
001F 0000        R     DW      ?C0008
0021 01                DB      01H
0022 0000        R     DW      ?C0009
0024 02                DB      02H
0025 0000        R     DW      ?C0010
0027 03                DB      03H
0028 0000              DW      00H
002A 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
002C         ?C0007:
                                           ; SOURCE LINE # 201
002C 850083      E     MOV     DPH,?C_XBP
002F 850082      E     MOV     DPL,?C_XBP+01H
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 2480              ADD     A,#080H
0038 FF                MOV     R7,A
0039 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 202
003C 8034              SJMP    ?C0012
                                           ; SOURCE LINE # 203
003E         ?C0008:
                                           ; SOURCE LINE # 204
003E 850083      E     MOV     DPH,?C_XBP
0041 850082      E     MOV     DPL,?C_XBP+01H
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 24C0              ADD     A,#0C0H
004A FF                MOV     R7,A
004B 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 205
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 16  

004E 8022              SJMP    ?C0012
                                           ; SOURCE LINE # 206
0050         ?C0009:
                                           ; SOURCE LINE # 207
0050 850083      E     MOV     DPH,?C_XBP
0053 850082      E     MOV     DPL,?C_XBP+01H
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 2494              ADD     A,#094H
005C FF                MOV     R7,A
005D 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 208
0060 8010              SJMP    ?C0012
                                           ; SOURCE LINE # 209
0062         ?C0010:
                                           ; SOURCE LINE # 210
0062 850083      E     MOV     DPH,?C_XBP
0065 850082      E     MOV     DPL,?C_XBP+01H
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 24D4              ADD     A,#0D4H
006E FF                MOV     R7,A
006F 120000      R     LCALL   _?LCD_WriteControl
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0072         ?C0012:
0072 900002            MOV     DPTR,#02H
0075 120000      E     LCALL   ?C?ADDXBP
0078 22                RET     
             ; FUNCTION _?LCD_Position (END)

             ; FUNCTION _?LCD_PrintString (BEGIN)
                                           ; SOURCE LINE # 233
0000 90FFFD            MOV     DPTR,#0FFFDH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?PSTXDATA
0009 90FFFE            MOV     DPTR,#0FFFEH
000C 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 235
000F 850083      E     MOV     DPH,?C_XBP
0012 850082      E     MOV     DPL,?C_XBP+01H
0015 7401              MOV     A,#01H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0018 850083      E     MOV     DPH,?C_XBP
001B 850082      E     MOV     DPL,?C_XBP+01H
001E A3                INC     DPTR
001F A3                INC     DPTR
0020 120000      E     LCALL   ?C?PLDXDATA
0023 120000      E     LCALL   ?C?CLDPTR
0026 FF                MOV     R7,A
0027 850083      E     MOV     DPH,?C_XBP
002A 850082      E     MOV     DPL,?C_XBP+01H
002D A3                INC     DPTR
002E EF                MOV     A,R7
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 17  

002F F0                MOVX    @DPTR,A
0030         ?C0013:
                                           ; SOURCE LINE # 239
0030 850083      E     MOV     DPH,?C_XBP
0033 850082      E     MOV     DPL,?C_XBP+01H
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 603D              JZ      ?C0015
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
003C 850083      E     MOV     DPH,?C_XBP
003F 850082      E     MOV     DPL,?C_XBP+01H
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 120000      R     LCALL   _?LCD_WriteData
                                           ; SOURCE LINE # 242
0048 850083      E     MOV     DPH,?C_XBP
004B 850082      E     MOV     DPL,?C_XBP+01H
004E A3                INC     DPTR
004F A3                INC     DPTR
0050 120000      E     LCALL   ?C?PLDXDATA
0053 850083      E     MOV     DPH,?C_XBP
0056 850082      E     MOV     DPL,?C_XBP+01H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B E9                MOV     A,R1
005C 2F                ADD     A,R7
005D F9                MOV     R1,A
005E E4                CLR     A
005F 3A                ADDC    A,R2
0060 FA                MOV     R2,A
0061 120000      E     LCALL   ?C?CLDPTR
0064 FF                MOV     R7,A
0065 850083      E     MOV     DPH,?C_XBP
0068 850082      E     MOV     DPL,?C_XBP+01H
006B A3                INC     DPTR
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
006E 850083      E     MOV     DPH,?C_XBP
0071 850082      E     MOV     DPL,?C_XBP+01H
0074 E0                MOVX    A,@DPTR
0075 04                INC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0077 80B7              SJMP    ?C0013
                                           ; SOURCE LINE # 245
0079         ?C0015:
0079 900005            MOV     DPTR,#05H
007C 120000      E     LCALL   ?C?ADDXBP
007F 22                RET     
             ; FUNCTION _?LCD_PrintString (END)

             ; FUNCTION _?LCD_PutChar (BEGIN)
                                           ; SOURCE LINE # 264
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 18  

                                           ; SOURCE LINE # 266
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _?LCD_WriteData
                                           ; SOURCE LINE # 267
0013 900001            MOV     DPTR,#01H
0016 120000      E     LCALL   ?C?ADDXBP
0019 22                RET     
             ; FUNCTION _?LCD_PutChar (END)

             ; FUNCTION _?LCD_WriteData (BEGIN)
                                           ; SOURCE LINE # 284
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 288
000E 120000      R     LCALL   _?LCD_IsReady
                                           ; SOURCE LINE # 289
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E FF                MOV     R7,A
001F 850083      E     MOV     DPH,?C_XBP
0022 850082      E     MOV     DPL,?C_XBP+01H
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0027 850083      E     MOV     DPH,?C_XBP
002A 850082      E     MOV     DPL,?C_XBP+01H
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 120000      R     LCALL   _?LCD_WrDatNib
                                           ; SOURCE LINE # 294
0032 850083      E     MOV     DPH,?C_XBP
0035 850082      E     MOV     DPL,?C_XBP+01H
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 540F              ANL     A,#0FH
003E FF                MOV     R7,A
003F 850083      E     MOV     DPH,?C_XBP
0042 850082      E     MOV     DPL,?C_XBP+01H
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0047 850083      E     MOV     DPH,?C_XBP
004A 850082      E     MOV     DPL,?C_XBP+01H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 120000      R     LCALL   _?LCD_WrDatNib
                                           ; SOURCE LINE # 297
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 19  

0052 900002            MOV     DPTR,#02H
0055 120000      E     LCALL   ?C?ADDXBP
0058 22                RET     
             ; FUNCTION _?LCD_WriteData (END)

             ; FUNCTION _?LCD_WriteControl (BEGIN)
                                           ; SOURCE LINE # 314
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 318
000E 120000      R     LCALL   _?LCD_IsReady
                                           ; SOURCE LINE # 320
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E FF                MOV     R7,A
001F 850083      E     MOV     DPH,?C_XBP
0022 850082      E     MOV     DPL,?C_XBP+01H
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0027 850083      E     MOV     DPH,?C_XBP
002A 850082      E     MOV     DPL,?C_XBP+01H
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 324
0032 850083      E     MOV     DPH,?C_XBP
0035 850082      E     MOV     DPL,?C_XBP+01H
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 540F              ANL     A,#0FH
003E FF                MOV     R7,A
003F 850083      E     MOV     DPH,?C_XBP
0042 850082      E     MOV     DPL,?C_XBP+01H
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0047 850083      E     MOV     DPH,?C_XBP
004A 850082      E     MOV     DPL,?C_XBP+01H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 120000      R     LCALL   _?LCD_WrCntrlNib
                                           ; SOURCE LINE # 328
0052 900002            MOV     DPTR,#02H
0055 120000      E     LCALL   ?C?ADDXBP
0058 22                RET     
             ; FUNCTION _?LCD_WriteControl (END)

             ; FUNCTION _?LCD_IsReady (BEGIN)
                                           ; SOURCE LINE # 348
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 20  

0000 90FFFB            MOV     DPTR,#0FFFBH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 352
0006 7F94              MOV     R7,#094H
0008 7E01              MOV     R6,#01H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 355
0018 905120            MOV     DPTR,#05120H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 5480              ANL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0023 905122            MOV     DPTR,#05122H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 54F0              ANL     A,#0F0H
002B FF                MOV     R7,A
002C 850083      E     MOV     DPH,?C_XBP
002F 850082      E     MOV     DPL,?C_XBP+01H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0034 850083      E     MOV     DPH,?C_XBP
0037 850082      E     MOV     DPL,?C_XBP+01H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 440F              ORL     A,#0FH
003F FF                MOV     R7,A
0040 905122            MOV     DPTR,#05122H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0045 905123            MOV     DPTR,#05123H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 54F0              ANL     A,#0F0H
004D FF                MOV     R7,A
004E 850083      E     MOV     DPH,?C_XBP
0051 850082      E     MOV     DPL,?C_XBP+01H
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0056 850083      E     MOV     DPH,?C_XBP
0059 850082      E     MOV     DPL,?C_XBP+01H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 905123            MOV     DPTR,#05123H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 21  

0063 905124            MOV     DPTR,#05124H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 54F0              ANL     A,#0F0H
006B FF                MOV     R7,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
0074 850083      E     MOV     DPH,?C_XBP
0077 850082      E     MOV     DPL,?C_XBP+01H
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 905124            MOV     DPTR,#05124H
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0081 905120            MOV     DPTR,#05120H
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 54DF              ANL     A,#0DFH
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
008C 905120            MOV     DPTR,#05120H
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 4440              ORL     A,#040H
0094 FF                MOV     R7,A
0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
0097         ?C0021:
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 397
0097 7F00              MOV     R7,#00H
0099 7E00              MOV     R6,#00H
009B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 400
009E 905120            MOV     DPTR,#05120H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 4410              ORL     A,#010H
00A6 FF                MOV     R7,A
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
00A9 7F01              MOV     R7,#01H
00AB 7E00              MOV     R6,#00H
00AD 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 406
00B0 905121            MOV     DPTR,#05121H
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 850083      E     MOV     DPH,?C_XBP
00B8 850082      E     MOV     DPL,?C_XBP+01H
00BB EF                MOV     A,R7
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 22  

00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
00BD 905120            MOV     DPTR,#05120H
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 EF                MOV     A,R7
00C3 54EF              ANL     A,#0EFH
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
00C8 7F00              MOV     R7,#00H
00CA 7E00              MOV     R6,#00H
00CC 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 415
00CF 850083      E     MOV     DPH,?C_XBP
00D2 850082      E     MOV     DPL,?C_XBP+01H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 5408              ANL     A,#08H
00DA FF                MOV     R7,A
00DB EF                MOV     A,R7
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
00DD 905120            MOV     DPTR,#05120H
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 EF                MOV     A,R7
00E3 4410              ORL     A,#010H
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
00E8 7F01              MOV     R7,#01H
00EA 7E00              MOV     R6,#00H
00EC 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 424
00EF 905120            MOV     DPTR,#05120H
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 EF                MOV     A,R7
00F5 54EF              ANL     A,#0EFH
00F7 FF                MOV     R7,A
00F8 EF                MOV     A,R7
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
00FA 850083      E     MOV     DPH,?C_XBP
00FD 850082      E     MOV     DPL,?C_XBP+01H
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 EF                MOV     A,R7
0103 7007              JNZ     ?C0022
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0105 7F0A              MOV     R7,#0AH
0107 7E00              MOV     R6,#00H
0109 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 430
010C         ?C0022:
                                           ; SOURCE LINE # 433
010C 850083      E     MOV     DPH,?C_XBP
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 23  

010F 850082      E     MOV     DPL,?C_XBP+01H
0112 A3                INC     DPTR
0113 120000      E     LCALL   ?C?LLDXDATA
0116 7BFF              MOV     R3,#0FFH
0118 7AFF              MOV     R2,#0FFH
011A 79FF              MOV     R1,#0FFH
011C 78FF              MOV     R0,#0FFH
011E 120000      E     LCALL   ?C?LADD
0121 850083      E     MOV     DPH,?C_XBP
0124 850082      E     MOV     DPL,?C_XBP+01H
0127 A3                INC     DPTR
0128 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 435
012B 850083      E     MOV     DPH,?C_XBP
012E 850082      E     MOV     DPL,?C_XBP+01H
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 EF                MOV     A,R7
0134 6016              JZ      ?C0020
0136 850083      E     MOV     DPH,?C_XBP
0139 850082      E     MOV     DPL,?C_XBP+01H
013C A3                INC     DPTR
013D 120000      E     LCALL   ?C?LLDXDATA
0140 D3                SETB    C
0141 EF                MOV     A,R7
0142 9400              SUBB    A,#00H
0144 EE                MOV     A,R6
0145 9400              SUBB    A,#00H
0147 4003              JC      $ + 5H
0149 020000      R     LJMP    ?C0021
014C         ?C0020:
                                           ; SOURCE LINE # 438
014C 905120            MOV     DPTR,#05120H
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 EF                MOV     A,R7
0152 54BF              ANL     A,#0BFH
0154 FF                MOV     R7,A
0155 EF                MOV     A,R7
0156 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0157 905120            MOV     DPTR,#05120H
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C EF                MOV     A,R7
015D 5480              ANL     A,#080H
015F FF                MOV     R7,A
0160 EF                MOV     A,R7
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0162 905122            MOV     DPTR,#05122H
0165 E0                MOVX    A,@DPTR
0166 FF                MOV     R7,A
0167 EF                MOV     A,R7
0168 54F0              ANL     A,#0F0H
016A FF                MOV     R7,A
016B EF                MOV     A,R7
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
016D 905123            MOV     DPTR,#05123H
0170 E0                MOVX    A,@DPTR
0171 FF                MOV     R7,A
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 24  

0172 EF                MOV     A,R7
0173 54F0              ANL     A,#0F0H
0175 FF                MOV     R7,A
0176 850083      E     MOV     DPH,?C_XBP
0179 850082      E     MOV     DPL,?C_XBP+01H
017C EF                MOV     A,R7
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
017E 850083      E     MOV     DPH,?C_XBP
0181 850082      E     MOV     DPL,?C_XBP+01H
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 EF                MOV     A,R7
0187 440F              ORL     A,#0FH
0189 FF                MOV     R7,A
018A 905123            MOV     DPTR,#05123H
018D EF                MOV     A,R7
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
018F 905124            MOV     DPTR,#05124H
0192 E0                MOVX    A,@DPTR
0193 FF                MOV     R7,A
0194 EF                MOV     A,R7
0195 54F0              ANL     A,#0F0H
0197 FF                MOV     R7,A
0198 850083      E     MOV     DPH,?C_XBP
019B 850082      E     MOV     DPL,?C_XBP+01H
019E EF                MOV     A,R7
019F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
01A0 850083      E     MOV     DPH,?C_XBP
01A3 850082      E     MOV     DPL,?C_XBP+01H
01A6 E0                MOVX    A,@DPTR
01A7 FF                MOV     R7,A
01A8 EF                MOV     A,R7
01A9 440F              ORL     A,#0FH
01AB FF                MOV     R7,A
01AC 905124            MOV     DPTR,#05124H
01AF EF                MOV     A,R7
01B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
01B1 900005            MOV     DPTR,#05H
01B4 120000      E     LCALL   ?C?ADDXBP
01B7 22                RET     
             ; FUNCTION _?LCD_IsReady (END)

             ; FUNCTION _?LCD_WrDatNib (BEGIN)
                                           ; SOURCE LINE # 486
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
0008 905120            MOV     DPTR,#05120H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 25  

0013 905120            MOV     DPTR,#05120H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54BF              ANL     A,#0BFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
001E 7F00              MOV     R7,#00H
0020 7E00              MOV     R6,#00H
0022 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 497
0025 905120            MOV     DPTR,#05120H
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 54F0              ANL     A,#0F0H
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
0030 905120            MOV     DPTR,#05120H
0033 C083              PUSH    DPH
0035 C082              PUSH    DPL
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 850083      E     MOV     DPH,?C_XBP
003C 850082      E     MOV     DPL,?C_XBP+01H
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 EE                MOV     A,R6
0042 4410              ORL     A,#010H
0044 FE                MOV     R6,A
0045 EF                MOV     A,R7
0046 4E                ORL     A,R6
0047 FF                MOV     R7,A
0048 D082              POP     DPL
004A D083              POP     DPH
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
004E 7F01              MOV     R7,#01H
0050 7E00              MOV     R6,#00H
0052 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 510
0055 905120            MOV     DPTR,#05120H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 54EF              ANL     A,#0EFH
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0060 900001            MOV     DPTR,#01H
0063 120000      E     LCALL   ?C?ADDXBP
0066 22                RET     
             ; FUNCTION _?LCD_WrDatNib (END)

             ; FUNCTION _?LCD_WrCntrlNib (BEGIN)
                                           ; SOURCE LINE # 528
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 26  

0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
0008 905120            MOV     DPTR,#05120H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 549F              ANL     A,#09FH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0013 905120            MOV     DPTR,#05120H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54F0              ANL     A,#0F0H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
001E 905120            MOV     DPTR,#05120H
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 850083      E     MOV     DPH,?C_XBP
002A 850082      E     MOV     DPL,?C_XBP+01H
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F EE                MOV     A,R6
0030 4410              ORL     A,#010H
0032 FE                MOV     R6,A
0033 EF                MOV     A,R7
0034 4E                ORL     A,R6
0035 FF                MOV     R7,A
0036 D082              POP     DPL
0038 D083              POP     DPH
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
003C 7F01              MOV     R7,#01H
003E 7E00              MOV     R6,#00H
0040 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 548
0043 905120            MOV     DPTR,#05120H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 54EF              ANL     A,#0EFH
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
004E 900001            MOV     DPTR,#01H
0051 120000      E     LCALL   ?C?ADDXBP
0054 22                RET     
             ; FUNCTION _?LCD_WrCntrlNib (END)

             ; FUNCTION _?LCD_PrintInt8 (BEGIN)
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 27  

                                           ; SOURCE LINE # 568
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 900000      R     MOV     DPTR,#LCD_hex
0019 93                MOVC    A,@A+DPTR
001A FF                MOV     R7,A
001B 120000      R     LCALL   _?LCD_PutChar
                                           ; SOURCE LINE # 573
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 900000      R     MOV     DPTR,#LCD_hex
002E 93                MOVC    A,@A+DPTR
002F FF                MOV     R7,A
0030 120000      R     LCALL   _?LCD_PutChar
                                           ; SOURCE LINE # 574
0033 900001            MOV     DPTR,#01H
0036 120000      E     LCALL   ?C?ADDXBP
0039 22                RET     
             ; FUNCTION _?LCD_PrintInt8 (END)

             ; FUNCTION _LCD_PrintInt16 (BEGIN)
                                           ; SOURCE LINE # 591
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0008 900000      R     MOV     DPTR,#value
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EE                MOV     A,R6
0011 FF                MOV     R7,A
0012 7E00              MOV     R6,#00H
0014 120000      R     LCALL   _?LCD_PrintInt8
                                           ; SOURCE LINE # 594
0017 900000      R     MOV     DPTR,#value
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 28  

001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 54FF              ANL     A,#0FFH
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _?LCD_PrintInt8
                                           ; SOURCE LINE # 595
0026 22                RET     
             ; FUNCTION _LCD_PrintInt16 (END)

             ; FUNCTION _LCD_PrintInt32 (BEGIN)
                                           ; SOURCE LINE # 612
0000 900000      R     MOV     DPTR,#value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
0006 900000      R     MOV     DPTR,#shift
0009 7420              MOV     A,#020H
000B F0                MOVX    @DPTR,A
000C         ?C0029:
                                           ; SOURCE LINE # 616
000C 900000      R     MOV     DPTR,#shift
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 601C              JZ      ?C0031
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 621
0014 900000      R     MOV     DPTR,#shift
0017 E0                MOVX    A,@DPTR
0018 24F8              ADD     A,#0F8H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
001B 900000      R     MOV     DPTR,#value
001E 120000      E     LCALL   ?C?LLDXDATA
0021 900000      R     MOV     DPTR,#shift
0024 E0                MOVX    A,@DPTR
0025 F9                MOV     R1,A
0026 A801              MOV     R0,AR1
0028 120000      E     LCALL   ?C?ULSHR
002B 120000      R     LCALL   _?LCD_PrintInt8
                                           ; SOURCE LINE # 625
002E 80DC              SJMP    ?C0029
                                           ; SOURCE LINE # 626
0030         ?C0031:
0030 22                RET     
             ; FUNCTION _LCD_PrintInt32 (END)

             ; FUNCTION _LCD_PrintU32Number (BEGIN)
                                           ; SOURCE LINE # 662
0000 900000      R     MOV     DPTR,#value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 666
0006 900000      R     MOV     DPTR,#digIndex
0009 740A              MOV     A,#0AH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
000C 900000      R     MOV     DPTR,#digIndex
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 29  

0011 7400        R     MOV     A,#LOW number
0013 2F                ADD     A,R7
0014 F582              MOV     DPL,A
0016 E4                CLR     A
0017 3400        R     ADDC    A,#HIGH number
0019 F583              MOV     DPH,A
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
001D 900000      R     MOV     DPTR,#digIndex
0020 E0                MOVX    A,@DPTR
0021 14                DEC     A
0022 F0                MOVX    @DPTR,A
0023         ?C0032:
                                           ; SOURCE LINE # 675
0023 900000      R     MOV     DPTR,#value
0026 120000      E     LCALL   ?C?LLDXDATA
0029 C3                CLR     C
002A EF                MOV     A,R7
002B 940A              SUBB    A,#0AH
002D EE                MOV     A,R6
002E 9400              SUBB    A,#00H
0030 4057              JC      ?C0033
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 680
0032 7B0A              MOV     R3,#0AH
0034 7A00              MOV     R2,#00H
0036 7900              MOV     R1,#00H
0038 7800              MOV     R0,#00H
003A 900000      R     MOV     DPTR,#value
003D 120000      E     LCALL   ?C?LLDXDATA
0040 120000      E     LCALL   ?C?ULDIV
0043 AC00              MOV     R4,AR0
0045 AD01              MOV     R5,AR1
0047 AE02              MOV     R6,AR2
0049 AF03              MOV     R7,AR3
004B EF                MOV     A,R7
004C 2430              ADD     A,#030H
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#tmpDigit
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
0054 900000      R     MOV     DPTR,#tmpDigit
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#digIndex
005C E0                MOVX    A,@DPTR
005D FE                MOV     R6,A
005E 7400        R     MOV     A,#LOW number
0060 2E                ADD     A,R6
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        R     ADDC    A,#HIGH number
0066 F583              MOV     DPH,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
006A 900000      R     MOV     DPTR,#value
006D 120000      E     LCALL   ?C?LLDXDATA
0070 7B0A              MOV     R3,#0AH
0072 7A00              MOV     R2,#00H
C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 30  

0074 7900              MOV     R1,#00H
0076 7800              MOV     R0,#00H
0078 120000      E     LCALL   ?C?ULDIV
007B 900000      R     MOV     DPTR,#value
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 687
0081 900000      R     MOV     DPTR,#digIndex
0084 E0                MOVX    A,@DPTR
0085 14                DEC     A
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
0087 809A              SJMP    ?C0032
0089         ?C0033:
                                           ; SOURCE LINE # 693
0089 7B0A              MOV     R3,#0AH
008B 7A00              MOV     R2,#00H
008D 7900              MOV     R1,#00H
008F 7800              MOV     R0,#00H
0091 900000      R     MOV     DPTR,#value
0094 120000      E     LCALL   ?C?LLDXDATA
0097 120000      E     LCALL   ?C?ULDIV
009A AC00              MOV     R4,AR0
009C AD01              MOV     R5,AR1
009E AE02              MOV     R6,AR2
00A0 AF03              MOV     R7,AR3
00A2 EF                MOV     A,R7
00A3 2430              ADD     A,#030H
00A5 FF                MOV     R7,A
00A6 900000      R     MOV     DPTR,#tmpDigit
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
00AB 900000      R     MOV     DPTR,#tmpDigit
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 900000      R     MOV     DPTR,#digIndex
00B3 E0                MOVX    A,@DPTR
00B4 FE                MOV     R6,A
00B5 7400        R     MOV     A,#LOW number
00B7 2E                ADD     A,R6
00B8 F582              MOV     DPL,A
00BA E4                CLR     A
00BB 3400        R     ADDC    A,#HIGH number
00BD F583              MOV     DPH,A
00BF EF                MOV     A,R7
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
00C1 900000      R     MOV     DPTR,#digIndex
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 7400        R     MOV     A,#LOW number
00C8 2F                ADD     A,R7
00C9 F9                MOV     R1,A
00CA E4                CLR     A
00CB 3400        R     ADDC    A,#HIGH number
00CD FA                MOV     R2,A
00CE 7B01              MOV     R3,#01H
00D0 120000      R     LCALL   _?LCD_PrintString
                                           ; SOURCE LINE # 698
00D3 22                RET     
             ; FUNCTION _LCD_PrintU32Number (END)

C51 COMPILER V9.51   LCD                                                                   11/19/2018 18:58:12 PAGE 31  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1605    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      2      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
